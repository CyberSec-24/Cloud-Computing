Attackers can exploit SSRF vulnerabilities in a web application that is hosting the cloud service to retrieve the AWS credentials for a role, add the retrieved credentials to the local aws-cli, retrieve user account details from S3 buckets, and gain access and exfiltrate the data stored in all the buckets related to that account. 

▪ Exploiting SSRF vulnerabilities to retrieve the AWS IAM credentials Attackers exploit SSRF vulnerabilities in web applications to gain access to cloud metadata services, such as AWS EC2, and retrieve the AWS access keys for a role.

These keys allow attackers to find and synchronize the S3 buckets to a local host, thereby gaining access to the data stored in those buckets.

Attackers can perform this attack only when the target web application is using Http and has a SSRF vulnerability in a GET variable called url.

▪ Adding credentials to the local aws-cli After accessing the AWS credentials for a role, add the credentials to the local aws-cli using the “aws configure” command.

▪ Gaining access to data stored in S3 buckets After adding the credentials, run the following command to check whether everything is set up properly:
aws sts get-caller-identity --profile stolen_profile
The above command retrieves the user ID, account number, and Amazon resource number (ARN) for the role


Now, run the following command to retrieve all buckets available for the account:
aws s3 ls --profile stolen_profile
The above command lists all the S3 buckets for the specific account, which can be accessed by the IAM role. 

Finally, run the following command to synchronize and download the data stored in the buckets to the local system: 
aws s3 sync s3://bucket-name /home/attacker/localstash/targetcloud/ --profile stolen_profile








